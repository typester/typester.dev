{"title":"","date":"2024-11-16T05:32:00-08:00","tags":["rust","rust-mobile-core","ios","android"],"eid":"9f93b1b2-49e4-4fff-8556-d1840d926e5a","image":null,"content":"<p>This entry is the second in the <a href=\"https://typester.dev/blog/tags/rust-mobile-core\">#rust-mobile-core</a> series. Today, I'll discuss setting up the environment for developing an app using this architecture.</p>\n<p>Environment setup can be divided into tasks that you need to do only once and tasks that need to be done for each project. This entry will cover the former.</p>\n<p>Once you complete the steps in this entry, you should be able to build my <a href=\"https://github.com/typester/auth2/\">sample project</a>. I will explain how to do that at the end of this post.</p>\n\n<h3>Install Required Software</h3>\n<p>Obviously, you'll need <a href=\"https://developer.android.com/studio\">Android Studio</a> for Android development and <a href=\"https://developer.apple.com/xcode/\">Xcode</a> for iOS development. Please install them if they aren't already on your system.</p>\n<p>I use Linux for Android development and macOS for iOS development, so my explanations will be based on those environments. For Android Studio, there should be no significant differences between Linux and macOS except for file paths, so adapt accordingly.</p>\n\n<h3>Installing the NDK (Android Only)</h3>\n<p>If you are developing an Android app, in addition to Android Studio itself, you'll need to install the <a href=\"https://developer.android.com/ndk\">NDK</a>.</p>\n<p>To install the NDK, select <code>Tools -&gt; SDK Manager</code> from the Android Studio menu. Then, select the <code>SDK Tools</code> tab in the middle of the page.</p>\n<p>Make sure to check the box for <code>Show Package Details</code> in the bottom right to specify the NDK version.</p>\n<p>The screen should look something like this:</p>\n<section class=\"image\">\n  <div>\n    <a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/typester/54148129872/in/datetaken-public/\" title=\"install ndk\"><img src=\"https://live.staticflickr.com/65535/54148129872_ff3ca10fba_h.jpg\" width=\"1505\" height=\"1114\" alt=\"install ndk\"/></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n  </div>\n</section>\n\n<p>Here, select <code>22.1.7171670</code> for the NDK version, then click OK or Apply to install it.</p>\n<section class=\"notice\">\n<h4>Why Use an Older Version of the NDK?</h4>\n<p>I started developing with this architecture about two years ago. At that time, with the then-latest NDK version, Rust library builds would seem successful but result in an error at runtime due to missing symbols. While simpler libraries were unaffected, more complex libraries that used various crates had a high probability of encountering this issue. Eventually, I resolved this by downgrading to version 22, after which the problem disappeared. Since then, I've been sticking with this version.</p>\n<p>However, I haven't tried newer NDK versions since then, so if anyone has information on the current state of the NDK, I'd be happy to hear it.</p>\n</section>\n\n<h4>Modifying the NDK to Enable Rust Library Builds</h4>\n<p>By default, trying to build a Rust library with the NDK might result in errors such as missing <code>libgcc.a</code> or <code>libunwind.a</code>. With version <code>22.1.7171670</code>, you'll likely see an error indicating that <code>libunwind.a</code> could not be found, as follows:</p>\n<pre><code class=\"shell\">= note: ld: error: unable to find library -lunwind\n        clang: error: linker command failed with exit code 1 (use -v to see invocation)</code></pre>\n\n<p>You can solve this by creating a <code>libunwind.a</code> file in the same directory as <code>libgcc.a</code>, with the following content:</p>\n<pre><code class=\"shell\"><span class=\"function-name\">INPUT</span>(-lgcc)</code></pre>\n\n<p>In newer NDK versions, the roles of <code>libunwind</code> and <code>libgcc</code> may be reversed, in which case creating a <code>libgcc.a</code> file referring to <code>libunwind</code> should solve the problem.</p>\n<p>Below is the shell script I used:</p>\n<pre><code class=\"shell\">find ~/Android/Sdk/ndk/22.1.7171670/toolchains -name libgcc.a | <span class=\"keyword\">while </span><span class=\"builtin\">read</span> libgcc_path; <span class=\"keyword\">do</span>\n  <span class=\"variable-name\">dir_path</span>=$(<span class=\"sh-quoted-exec\">dirname \"$libgcc_path\"</span>)\n  <span class=\"builtin\">echo</span> <span class=\"string\">'INPUT(-lgcc)'</span> &gt; <span class=\"string\">\"$dir_path/libunwind.a\"</span>\n<span class=\"keyword\">done</span></code></pre>\n\n<h3>Adding NDK to PATH</h3>\n<p>If you installed the NDK in the default location, it should be at the following paths:</p>\n<ul>\n<li><strong>Linux</strong>: <code>~/Android/Sdk/ndk/22.1.7171670</code></li>\n<li><strong>macOS</strong>: <code>~/Library/Android/sdk/ndk/22.1.7171670</code></li>\n</ul>\n\n<p>If it's in a different location, adjust accordingly. The directory that needs to be added to PATH is as follows:</p>\n<ul>\n<li><strong>Linux</strong>: <code>~/Android/Sdk/ndk/22.1.7171670/toolchains/llvm/prebuilt/linux-x86_64/bin</code></li>\n<li><strong>macOS</strong>: <code>~/Library/Android/sdk/ndk/22.1.7171670/toolchains/llvm/prebuilt/darwin-x86_64/bin</code></li>\n</ul>\n\n<p>This completes the NDK-side setup.</p>\n\n<h3>Installing Rust</h3>\n<p>I assume readers of this series already have experience with Rust, so I won't go into much detail on installing Rust itself. For this post, I'll assume Rust is installed via <code>rustup</code>.</p>\n\n<h3>Adding Mobile Targets for Rust</h3>\n<p>Please add the following targets. Here, we're only targeting 64-bit architectures. If you want to support older 32-bit devices, you'll need to add those targets as well.</p>\n<ul>\n<li>For Android:\n<ul>\n<li><code>aarch64-linux-android</code></li>\n<li><code>x86_64-linux-android</code></li>\n</ul></li>\n<li>For iOS:\n<ul>\n<li><code>aarch64-apple-ios</code></li>\n<li><code>aarch64-apple-ios-sim</code></li>\n</ul></li>\n</ul>\n\n<p>If you're using an Intel Mac, add <code>x86_64-apple-ios</code> instead of <code>aarch64-apple-ios-sim</code>.</p>\n<p>You can add the targets with the following commands:</p>\n<pre><code class=\"shell\"><span class=\"comment-delimiter\"># </span><span class=\"comment\">targets for Android</span>\nrustup target add arch64-linux-android x86_64-linux-android\n\n<span class=\"comment-delimiter\"># </span><span class=\"comment\">targets for iOS</span>\nrustup target add aarch64-apple-ios aarch64-apple-ios-sim</code></pre>\n\n<h3>Configuring Cargo</h3>\n<p>Open <code>~/.cargo/config.toml</code> and add the following:</p>\n<pre><code class=\"conf\">[<span class=\"type\">target.aarch64-linux-android</span>]\n<span class=\"variable-name\">linker</span> = <span class=\"string\">\"aarch64-linux-android30-clang\"</span>\n\n[<span class=\"type\">target.x86_64-linux-android</span>]\n<span class=\"variable-name\">linker</span> = <span class=\"string\">\"x86_64-linux-android30-clang\"</span></code></pre>\n\n<h3>Installing cargo-lipo</h3>\n<p>For building iOS libraries, <a href=\"https://github.com/TimNN/cargo-lipo\">cargo-lipo</a> makes it easy to create universal libraries without needing to do it manually. Install it with the following command:</p>\n<pre><code class=\"shell\">cargo install cargo-lipo</code></pre>\n\n<h3>Verifying the Setup</h3>\n<p>After completing the setup, you should be able to build my sample project. Follow the steps below to try building the project.</p>\n<p>The sample project can be found here:</p>\n<blockquote>\n<p><a href=\"https://github.com/typester/auth2/\">https://github.com/typester/auth2/</a></p>\n</blockquote>\n\n<h4>Android</h4>\n<p>Use the following command to generate the Rust library and Kotlin bindings:</p>\n<pre><code class=\"shell\"><span class=\"builtin\">cd</span> ./core\n./build-android-lib.sh</code></pre>\n\n<p>Once the build completes without errors, you should be able to open the <code>android</code> directory in Android Studio and run the app.</p>\n\n<h4>iOS</h4>\n<p>Use the following command to build the Rust library:</p>\n<pre><code class=\"shell\"><span class=\"builtin\">cd</span> ./core\ncargo lipo --release\ncargo build --release --target aarch64-apple-ios-sim</code></pre>\n\n<p>Once this completes without errors, you should be able to open <code>ios/Auth2.xcodeproj</code> in Xcode and run the app.</p>\n\n<h3>Summary</h3>\n<p>In this entry, I summarized the setup process for the <a href=\"https://typester.dev/blog/tags/rust-mobile-core\">#rust-mobile-core</a> environment. Setting up Android development can be a bit of a hassle, but once it's done, you won't need to worry about it anymore, so let's get through this initial effort.</p>\n<p>Next time, I'll write about how to start a project and the setup needed for each project.</p>\n<p>このエントリーは <a href=\"https://typester.dev/blog/tags/rust-mobile-core\">#rust-mobile-core</a> シリーズの2エントリ目です。\n今回はこのアーキテクチャでアプリを作るための環境設定について書きます。</p>\n<p>環境設定といっても、一度設定するだけでいいものと、プロジェクト毎におこなう必要があるものに分かれます。今回のエントリーでは前者を扱います。</p>\n<p>このエントリーの設定をおこなうと、わたしの作った<a href=\"https://github.com/typester/auth2/\">サンプルプロジェクト</a>をビルドすることができるようになります。そのやり方はこのエントリーの最後に説明します。</p>\n\n<h3>必要なソフトウェアをインストールする</h3>\n<p>当然ではありますが、Androidアプリの開発には<a href=\"https://developer.android.com/studio\">Android Studio</a>が、iOSアプリの開発には<a href=\"https://developer.apple.com/xcode/\">Xcode</a>が必要になりますので、もしこれらがインストールされていない場合はインストールしてください。</p>\n<p>わたしは、Android開発はLinuxでおこない、iOS開発はmacOSでおこなっているため、以下の説明ではそれらの環境をベースに話をします。Android Studioに関してはLinuxとMacでは各ファイルのパスが違う以外は同じはずですので、適宜読み変えてください。</p>\n\n<h3>NDKのインストール (Androidのみ)</h3>\n<p>Androidアプリを開発する場合、Android Studio本体に追加して、<a href=\"https://developer.android.com/ndk\">NDK</a>のインストールが必要です。</p>\n<p>NDKをインストールするには、Android Studioのメニューから <code>Tools -&gt; SDK Manager</code> を選んでください。\nその後ページ真ん中のタブから <code>SDK Tools</code> を選択してください。</p>\n<p>また、NDKのバージョンを指定するために、右下の <code>Show Package Details</code> にはチェックをいれてください。</p>\n<p>そうすると以下の画面のようになるはずです。</p>\n<section class=\"image\">\n  <div>\n    <a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/typester/54148129872/in/datetaken-public/\" title=\"install ndk\"><img src=\"https://live.staticflickr.com/65535/54148129872_ff3ca10fba_h.jpg\" width=\"1505\" height=\"1114\" alt=\"install ndk\"/></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n  </div>\n</section>\n\n<p>ここで、NDKの <code>22.1.7171670</code> にチェックを入れてOKもしくはApplyをおすと、NDKがインストールされます。</p>\n<section class=\"notice\">\n<h4>NDKのバージョンについて、なぜ古いバージョンをつかうのか？</h4>\n<p>わたしがこのアーキテクチャでの開発をはじめたのは2年ほどまえなのですが、その時に当時の最新のNDKだと、Rustのライブラリーのビルドが成功したように見えても、それをロードするタイミングでSymbolが見つからないというエラーになってしまう問題がありました。簡単なライブラリーは問題なくても、実際にいろいろなcrateを使ったライブラリーだとかなりの確率でこの問題が発生し、原因がわからなかったのでNDKのバージョンを下げていった結果、22までおとすと問題がおこらなくなることがわかったので、それ以来このバージョンをずっとつかっています。</p>\n<p>ただ、それ以降にリリースされたNDKは試していないので、現在のNDKの状況をご存知の方がいれば情報いただけるとうれしいです。</p>\n</section>\n\n<h4>NDKを修正してRustで作ったライブラリーのビルドが通るようにする</h4>\n<p>デフォルトの状態のNDKでRustでつくったライブラリーをビルドしようとすると、 <code>libgcc.a</code> がみつからない、もしくは <code>libunwind.a</code> がみつからない、というエラーがおきるかもしれません。 <code>22.1.7171670</code> では以下のように <code>libunwind.a</code> が見つからないというエラーがでるとおもいます。</p>\n<pre><code class=\"shell\">= note: ld: error: unable to find library -lunwind\n        clang: error: linker command failed with exit code 1 (use -v to see invocation)</code></pre>\n\n<p>これはNDKのディレクトリ以下のlibgcc.aというファイルを検索し、そこと同じ場所に</p>\n<pre><code class=\"shell\"><span class=\"function-name\">INPUT</span>(-lgcc)</code></pre>\n\n<p>という内容で、 <code>libunwind.a</code> を作成すれば解決するはずです。新しいNDKではlibunwindとlibgccが逆になっていることがあるとおもいますが、その場合は逆にlibunwindへの参照として <code>libgcc.a</code> を作成することで解決します。</p>\n<p>以下にわたしが使ったシェルスクリプトを置いておくので参考にしてください。</p>\n<pre><code class=\"shell\">find ~/Android/Sdk/ndk/22.1.7171670/toolchains -name libgcc.a | <span class=\"keyword\">while </span><span class=\"builtin\">read</span> libgcc_path; <span class=\"keyword\">do</span>\n  <span class=\"variable-name\">dir_path</span>=$(<span class=\"sh-quoted-exec\">dirname \"$libgcc_path\"</span>)\n  <span class=\"builtin\">echo</span> <span class=\"string\">'INPUT(-lgcc)'</span> &gt; <span class=\"string\">\"$dir_path/libunwind.a\"</span>\n<span class=\"keyword\">done</span></code></pre>\n\n<h4>NDKにPATHを通す</h4>\n<p>デフォルトのPATHにNDKをインストールした場合、以下の場所にNDKがインストールされているはずです</p>\n<ul>\n<li><strong>Linux</strong>: <code>~/Android/Sdk/ndk/22.1.7171670</code></li>\n<li><strong>macOS</strong>: <code>~/Library/Android/sdk/ndk/22.1.7171670</code></li>\n</ul>\n\n<p>もし違ったら適宜変更してください。PATHを通すのはそれ以下の以下のディレクトリになります。</p>\n<ul>\n<li><strong>Linux</strong>: <code>~/Android/Sdk/ndk/22.1.7171670/toolchains/llvm/prebuilt/linux-x86_64/bin</code></li>\n<li><strong>macOS</strong>: <code>~/Library/Android/sdk/ndk/22.1.7171670/toolchains/llvm/prebuilt/darwin-x86_64/bin</code></li>\n</ul>\n\n<p>これでNDKサイドの設定は完了です。</p>\n\n<h3>Rustのインストール</h3>\n<p>わたしはこのシリーズの読者はすでにRustでの開発経験があることを想定しているので、Rust自体のインストールにはあまり詳しく触れるつもりはありません。とりあえず以下の文章では <code>rustup</code> を利用してRustがインストールされていると仮定してすすめます。</p>\n\n<h3>モバイル用にrustのターゲットを追加する</h3>\n<p>以下のtargetをそれぞれ追加してください。ここでは64bitアーキテクチャのみをtargetにしています。もし、あなたが古い32bitなデバイスもサポートしたいと考えるならそれらのターゲットも追加する必要があります。</p>\n<ul>\n<li>Android用\n<ul>\n<li><code>aarch64-linux-android</code></li>\n<li><code>x86_64-linux-android</code></li>\n</ul></li>\n<li>iOS用\n<ul>\n<li><code>aarch64-apple-ios</code></li>\n<li><code>aarch64-apple-ios-sim</code></li>\n</ul></li>\n</ul>\n\n<p>Intel Macを使用している場合は <code>aarch64-apple-ios-sim</code> のかわりに <code>x86_64-apple-ios</code> を追加してください。</p>\n<p>以下のコマンドでtargetを追加できます。</p>\n<pre><code class=\"shell\"><span class=\"comment-delimiter\"># </span><span class=\"comment\">targets for Android</span>\nrustup target add arch64-linux-android x86_64-linux-android\n\n<span class=\"comment-delimiter\"># </span><span class=\"comment\">targets for iOS</span>\nrustup target add aarch64-apple-ios aarch64-apple-ios-sim</code></pre>\n\n<h3>Cargoの設定</h3>\n<p><code>~/.cargo/config.toml</code> を開いて以下の内容を追加してください。</p>\n<pre><code class=\"conf\">[<span class=\"type\">target.aarch64-linux-android</span>]\n<span class=\"variable-name\">linker</span> = <span class=\"string\">\"aarch64-linux-android30-clang\"</span>\n\n[<span class=\"type\">target.x86_64-linux-android</span>]\n<span class=\"variable-name\">linker</span> = <span class=\"string\">\"x86_64-linux-android30-clang\"</span></code></pre>\n\n<h3>cargo-lipoのインストール</h3>\n<p>iOSのライブラリーのビルドには<a href=\"https://github.com/TimNN/cargo-lipo\">cargo-lipo</a>を利用すると、自前でuniversal化しなくて良いので楽です。以下のコマンドでインストールしておきましょう</p>\n<pre><code class=\"shell\">cargo install cargo-lipo</code></pre>\n\n<h3>設定の確認</h3>\n<p>これまでの設定で、わたしが作ったサンプルプロジェクトをビルドすることができるようになっているはずです。\n以下の手順でプロジェクトをビルドしてみましょう。</p>\n<p>サンプルプロジェクトは以下に置いています。</p>\n<blockquote>\n<p><a href=\"https://github.com/typester/auth2/\">https://github.com/typester/auth2/</a></p>\n</blockquote>\n\n<h4>Android</h4>\n<p>以下のコマンドでRustライブラリーとKotlinのバインディングが生成されます。</p>\n<pre><code class=\"shell\"><span class=\"builtin\">cd</span> ./core\n./build-android-lib.sh</code></pre>\n\n<p>エラーなくビルドが終了したら、あとはAndroid Studioでandroidディレクトリを開けばアプリを実行できるようになっているはずです。</p>\n\n<h4>iOS</h4>\n<p>以下のコマンドでRustライブラリーをビルドします</p>\n<pre><code class=\"shell\"><span class=\"builtin\">cd</span> ./core\ncargo lipo --release\ncargo build --release --target aarch64-apple-ios-sim</code></pre>\n\n<p>こちらもエラーなくビルドが終了したら、 <code>ios/Auth2.xcodeproj</code> をXcodeで開けばアプリを実行できるようになっているはずです。</p>\n\n<h3>まとめ</h3>\n<p>今回は <a href=\"https://typester.dev/blog/tags/rust-mobile-core\">#rust-mobile-core</a> の環境つくりについてまとめました。とくにAndroid周りがいろいろ面倒ですが、一度設定してしまえば気にすることはないので、最初だけがんばりましょう。\n次回はプロジェクトの初めかた、プロジェクト毎の設定について書きます。</p>\n"}
