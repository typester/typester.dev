{"title":"Controlling YouTube Music on a Wayland Desktop","date":"2025-02-06T14:08:00-08:00","tags":["linux","wayland","music"],"eid":"e60474d9-a063-48d3-80ae-1faa711ea29d","image":"https://live.staticflickr.com/65535/54311506338_1f3278c2cf_h.jpg","content":"<p>I've been using YouTube Music for listening to music over the past few years. In the past, I used Apple Music and Spotify, but I got drawn into YouTube Premium‚Äôs bundled offer and ended up switchingüòÅ</p>\n<p>Until now, I barely used it on my PC, mainly relying on my phone while driving.</p>\n<p>However, since changing jobs, my meetings have drastically decreased, allowing me to focus for long periods. As a result, I‚Äôve recently started listening to music on my PC again.</p>\n<p>For a while, I used it normally in a browser, but I became frustrated by the lack of global shortcut key support for playback control. After some research, I found that the <a href=\"https://github.com/th-ch/youtube-music\">th-ch/youtube-music</a> app has a plugin that supports global shortcuts. So gave it a try.</p>\n\n<h3>Installation</h3>\n<p>On Arch Linux, an AUR package is available, so installation is as simple as running:</p>\n<pre><code class=\"sh\">$ paru -S youtube-music-bin</code></pre>\n\n<p>The app looks like this:</p>\n<section class=\"image\">\n  <div>\n    <a data-flickr-embed=\"true\" href=\"https://www.flickr.com/photos/typester/54311506338/in/datetaken-public/\" title=\"YouTube Music Desktop App\"><img src=\"https://live.staticflickr.com/65535/54311506338_1f3278c2cf_h.jpg\" width=\"1600\" height=\"900\" alt=\"YouTube Music Desktop App\"/></a><script async src=\"//embedr.flickr.com/assets/client-code.js\" charset=\"utf-8\"></script>\n  </div>\n</section>\n\n<h3>Enabling Wayland</h3>\n<p>Like other Electron-based apps, Wayland is not enabled by default. To enable it, create a file at <code>~/.config/youtube-music-flags.conf</code> and add the following setting:</p>\n<pre><code class=\"conf\"><span class=\"variable-name\">--ozone-platform</span>=wayland</code></pre>\n\n<h3>Configuring Global Shortcuts</h3>\n<p>The shortcut plugin mentioned earlier does not seem to work on Wayland.</p>\n<p>However, there is another plugin called the API Server plugin, which I was able to use to achieve the same goal.</p>\n\n<h3>API Server Plugin</h3>\n<p>I had a bit of trouble finding instructions on how to use it. Since I couldn‚Äôt locate any documentation, I searched through issues and found what I needed.</p>\n<p>Once the plugin is enabled, you can access the API documentation at:</p>\n<pre><code class=\"text\">http://api-host:api-port/swagger</code></pre>\n\n<p>I use the default settings except for setting the host to 127.0.0.1 to prevent external access.</p>\n\n<h4>Authentication</h4>\n<p>You can obtain a token by sending a POST request to <code>/auth/{id}</code>. After that, you can use the token to interact with other API endpoints.</p>\n<pre><code class=\"sh\">&#10095; curl -i -X POST 127.0.0.1:26538/auth/me\nHTTP/1.1 200 OK\naccess-control-allow-origin: *\naccess-control-request-private-network: true\ncontent-type: application/json\ncontent-length: 137\nDate: Thu, 06 Feb 2025 21:54:08 GMT\nConnection: keep-alive\nKeep-Alive: <span class=\"variable-name\">timeout</span>=5\n\n{<span class=\"string\">\"accessToken\"</span>:<span class=\"string\">\"&lt;my access token&gt;\"</span>}</code></pre>\n\n<p>At first, I couldn‚Äôt use the issued token due to Unauthorized errors, but restarting the app fixed the issue.</p>\n\n<h4>Controlling Playback</h4>\n<p>I configured key bindings in <a href=\"https://isaacfreund.com/software/river/\">river</a> to call the API, achieving the intended functionality.</p>\n<p>First, I created the following script:</p>\n<pre><code class=\"sh\"><span class=\"comment-delimiter\">#</span><span class=\"comment\">!/bin/</span><span class=\"keyword\">sh</span>\n\n<span class=\"variable-name\">TOKEN</span>=<span class=\"string\">\"&lt;my token here&gt;\"</span>\n\n<span class=\"keyword\">if</span> [ -z <span class=\"string\">\"$1\"</span> ]; <span class=\"keyword\">then</span>\n    <span class=\"builtin\">echo</span> <span class=\"string\">\"Usage: $0 &lt;operation&gt;\"</span>\n    <span class=\"keyword\">exit</span> 1\n<span class=\"keyword\">fi</span>\n\n<span class=\"variable-name\">OP</span>=$<span class=\"variable-name\">1</span>\n\n<span class=\"keyword\">exec</span> curl -X POST <span class=\"sh-escaped-newline\">\\</span>\n     -H <span class=\"string\">\"Authorization: Bearer $TOKEN\"</span> <span class=\"sh-escaped-newline\">\\</span>\n     <span class=\"string\">\"http://127.0.0.1:26538/api/v1/$OP\"</span></code></pre>\n\n<p>Then, I configured river to use this script:</p>\n<pre><code class=\"sh\"><span class=\"comment-delimiter\"># </span><span class=\"comment\">Youtube Music Control</span>\nriverctl map normal Super W spawn <span class=\"string\">\"~/.config/river/youtube-music.sh toggle-play\"</span>\nriverctl map normal Super Q spawn <span class=\"string\">\"~/.config/river/youtube-music.sh previous\"</span>\nriverctl map normal Super E spawn <span class=\"string\">\"~/.config/river/youtube-music.sh next\"</span></code></pre>\n\n<p>Now, I can comfortably enjoy music!</p>\n"}
