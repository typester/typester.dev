{"title":"Hello World","date":"2024-11-01T21:30:00-08:00","tags":["web","rust","personal"],"eid":"01ea3041-2ec5-4cdc-886a-f09e01e8107c","image":null,"content":"<p>I was recently laid off and am currently in the middle of an intense job search. However, I was struggling because I didn’t have a personal website in English to showcase my portfolio.</p>\n<p>Since I had always wanted to create one, I took this as a good opportunity and built this site.</p>\n<p><a href=\"https://unknownplace.org/\">My Japanese website</a> uses Next.js to generate static HTML, but for this site, I decided to dynamically generate content. This is because I have future plans to experiment with ActivityPub support.</p>\n<p>Here’s an overview of the structure of this website.</p>\n\n<h3>Generating entries</h3>\n<p>I enjoy writing in Emacs’ org-mode, so most of the content on my personal site is generated from org-mode files. While org-mode supports exporting to HTML by default, the generated HTML doesn’t match my preferences. So, I created an org-mode extension called <code>ox-simple-html.el</code> to generate clean, simple HTML, and I use it to convert org files into HTML.</p>\n<p>Additionally, to make the content easier to work with programmatically, such as including metadata like post dates and tags, I also created <code>ox-html-json.el</code>, which exports content in JSON format. Internally, this extension utilizes ox-simple-html.el that I mentioned above.</p>\n<p>These two extentions are available on my github: <a href=\"https://github.com/typester/ox-blosxom\">https://github.com/typester/ox-blosxom</a></p>\n<p>And here’s an example of my Emacs configuration:</p>\n<pre><code class=\"lisp\">(setq org-capture-templates\n      `(\n        <span class=\"comment-delimiter\">;; </span><span class=\"comment\">(...snip)</span>\n        (<span class=\"string\">\"t\"</span> <span class=\"string\">\"typester.dev\"</span> plain (file (<span class=\"keyword\">lambda</span> ()\n                                  (<span class=\"keyword\">let*</span> ((slug (read-string <span class=\"string\">\"slug: \"</span>))\n                                         (dir (concat <span class=\"string\">\"~/dev/src/github.com/typester/typester.dev/entries/blog\"</span>)))\n                                    (<span class=\"keyword\">require</span> '<span class=\"constant\">org-id</span>)\n                                    (make-directory dir t)\n                                    (concat dir <span class=\"string\">\"/\"</span> (format-time-string <span class=\"string\">\"%Y-%m-%d_\"</span>) slug <span class=\"string\">\".org\"</span>))))\n         <span class=\"string\">\"#+TITLE: %?\\n#+DATE: %T\\n#+TZ: %(format-time-string \\\"%z (%Z)\\\")\\n#+TAGS: draft\\n#+EID: %(org-id-uuid)\\n\\n\"</span>)\n        <span class=\"comment-delimiter\">;; </span><span class=\"comment\">(snip...)</span>\n        ))\n\n(setq org-publish-project-alist\n      '(\n        <span class=\"comment-delimiter\">;; </span><span class=\"comment\">(...snip)</span>\n        (<span class=\"string\">\"typester.dev\"</span>\n         <span class=\"builtin\">:base-directory</span> <span class=\"string\">\"~/dev/src/github.com/typester/typester.dev/entries\"</span>\n         <span class=\"builtin\">:base-extension</span> <span class=\"string\">\"org\"</span>\n         <span class=\"builtin\">:publishing-directory</span> <span class=\"string\">\"~/dev/src/github.com/typester/typester.dev/entries-json\"</span>\n         <span class=\"builtin\">:recursive</span> t\n         <span class=\"builtin\">:publishing-function</span> org-html-json-publish-to-json)\n        <span class=\"comment-delimiter\">;; </span><span class=\"comment\">(snip...)</span>\n        ))</code></pre>\n\n<p>This configuration consists of two parts:</p>\n<ol>\n<li><strong>org-capture-template configuration</strong>: This allows for quickly creating blog entries.</li>\n<li><strong>org-publish-project configuration</strong>: This sets up the project for exporting org-mode content to other formats. Here, the custom exporters mentioned earlier are specified.</li>\n</ol>\n\n<p>You can also check out my whole Emacs configuration <a href=\"https://github.com/typester/emacs-config\">here</a>. Feel free to take a look if you’re interested!</p>\n\n<h3>Server-Side Implementation</h3>\n<p>I built a simple web server in Rust.</p>\n<ul>\n<li>It loads all the entry JSON files into memory at startup.</li>\n<li>Then, based on incoming requests, it injects the entries into templates and outputs HTML.</li>\n</ul>\n\n<p>The program is very straightforward.</p>\n<p>For the template library, I used maud. This was my first time using it, but I found it quite nice. It allows you to write HTML as a DSL, and its well-thought-out design means there isn’t much to memorize. I got comfortable with it quickly.</p>\n<p>One issue I encountered was that, when writing templates in Rust code, I had to rebuild the project every time I changed the HTML. This was especially frustrating during design adjustments, where you frequently edit and preview changes. The build process became quite a bottleneck.</p>\n<p>This issue is compounded by the fact that class-based CSS frameworks like Tailwind are mainstream these days, and modifying styles often requires changes to the HTML itself.</p>\n<p>This made it incompatible with maud, so I initially started building the site with Tailwind but abandoned it because the rebuild times were unbearable.</p>\n<p>In the end, I went with the classic approach: generate simple HTML and style it using external CSS. While writing raw CSS is painful, I used Sass to make the process easier. Surprisingly, Sass and maud had great synergy, which worked out really well.</p>\n\n<h3>Future Updates</h3>\n<p>Even though this site was built to showcase my portfolio, it currently only has a blog, so adding portfolio content is a high priority.</p>\n<p>Lately, I’ve been enjoying developing mobile apps where the core code is written in Rust. I’d like to write articles about this development style, as I think it’s amazing.</p>\n<p>Also, as I briefly mentioned earlier, I’d like to add features like update notifications and comments using ActivityPub. However, since this would take significant time to implement, I probably won’t get to it for a while.</p>\n<p>That’s all for now! Thanks for reading.</p>\n"}
